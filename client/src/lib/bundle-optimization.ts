// Bundle size optimization for 40x20s framework
// Target: Reduce initial bundle from 31MB to <5MB

import React from 'react';

// Route-based code splitting
export const routeComponents = {
  // Lazy load all route components
  Home: React.lazy(() => import('../pages/home')),
  Profile: React.lazy(() => import('../pages/profile')),
  Events: React.lazy(() => import('../pages/events')),
  Groups: React.lazy(() => import('../pages/groups')),
  Stories: React.lazy(() => import('../pages/stories')),
  Friends: React.lazy(() => import('../pages/friends')),
  Messages: React.lazy(() => import('../pages/messages')),
  AdminCenter: React.lazy(() => import('../pages/AdminCenter')),
  LifeCeo: React.lazy(() => import('../pages/LifeCEOEnhanced')),
  Community: React.lazy(() => import('../pages/community')),
  Settings: React.lazy(() => import('../pages/settings')),
  
  // Heavy components
  CommunityMapWithLayers: React.lazy(() => import('../components/maps/CommunityMapWithLayers')),
  HierarchyDashboard: React.lazy(() => import('../components/hierarchy/HierarchyDashboard')),
  ComprehensiveDashboard: React.lazy(() => import('../components/comprehensive/ComprehensiveDashboard')),
  GroupDetailPageMT: React.lazy(() => import('../pages/GroupDetailPageMT')),
  ProfileAboutSection: React.lazy(() => import('../components/profile/ProfileAboutSection')),
};

// Vendor chunking strategy
export const vendorChunks = {
  // React ecosystem
  react: ['react', 'react-dom', 'react-router-dom'],
  
  // UI libraries
  ui: ['@radix-ui', 'lucide-react', 'react-icons', '@mui'],
  
  // Data fetching
  data: ['@tanstack/react-query', 'axios'],
  
  // Maps
  maps: ['leaflet', 'react-leaflet', '@react-google-maps/api'],
  
  // Rich text
  richtext: ['react-quill', 'quill'],
  
  // Heavy utilities
  utils: ['lodash', 'date-fns', 'moment'],
};

// Preload critical chunks
export function preloadCriticalChunks() {
  // Preload React and UI chunks
  const link = document.createElement('link');
  link.rel = 'preload';
  link.as = 'script';
  
  // These will be generated by build process
  const criticalChunks = [
    '/assets/react-vendor.js',
    '/assets/ui-vendor.js',
    '/assets/app-core.js'
  ];
  
  criticalChunks.forEach(chunk => {
    const l = link.cloneNode() as HTMLLinkElement;
    l.href = chunk;
    document.head.appendChild(l);
  });
}

// Remove unused imports dynamically
export function treeShakeImports() {
  // This will be handled by Vite/Rollup during build
  // but we can help by using dynamic imports wisely
  
  // Example: Only import heavy chart library when needed
  const loadCharts = () => import('recharts');
  
  // Example: Only import map components when on map pages
  const loadMaps = () => import('leaflet');
  
  return {
    loadCharts,
    loadMaps
  };
}