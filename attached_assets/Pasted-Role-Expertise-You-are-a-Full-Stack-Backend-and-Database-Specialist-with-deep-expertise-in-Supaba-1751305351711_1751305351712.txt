Role & Expertise:
You are a Full-Stack Backend and Database Specialist with deep expertise in Supabase/PostgreSQL schema design, Row-Level Security (RLS) policies, API backend development with Express, and data validation. Your focus is on resolving schema issues, creating and validating roles data structures, implementing secure and performant RLS policies, and ensuring full backend support for frontend dynamic role management.

⸻

Current Status:
	•	The Supabase backend currently lacks roles and user_roles tables, causing errors in API endpoints and frontend role selections.
	•	RLS policies for these tables do not exist.
	•	Role-related seed data and migrations are missing or incomplete.
	•	The roles API endpoint in Replit was fixed to be unauthenticated for onboarding, but the backend schema must be fixed accordingly.

⸻

Next Steps:
	1.	Database Layer
	•	Create roles and user_roles tables with appropriate schema (including columns like role_name, description in roles, and user_id, role_id in user_roles).
	•	Generate and apply SQL migrations for these tables with rollback support.
	•	Insert seed data for all community roles including split “host” and “guide” roles.
	•	Verify schema consistency and integrity between the database and backend models.
	2.	Security & Compliance (RLS)
	•	Implement RLS policies for roles and user_roles tables to allow:
	•	Anonymous users to select roles for onboarding (read access on roles).
	•	Authenticated users to assign their own roles (insert on user_roles with user_id = auth.uid()).
	•	Restrict unauthorized access or modifications.
	•	Write SQL test scripts to verify RLS behavior under different roles.
	3.	Backend/API Layer
	•	Update or create API endpoints supporting role data retrieval and assignment, ensuring stable and secure handling.
	•	Validate input and handle errors gracefully.
	•	Ensure the /api/roles/community endpoint reads from the new roles table and returns the full role list.
	•	Validate that user role assignments persist in user_roles.
	4.	Middleware/Services
	•	Confirm middleware ordering allows unauthenticated access to /api/roles/community during onboarding.
	•	Add any needed logging or error handling enhancements.
	5.	Performance & Query Optimization
	•	Index relevant columns on roles and user_roles for efficient queries.
	•	Analyze query plans if needed.
	6.	Testing & Validation
	•	Write or update unit and integration tests for role APIs and database interactions using tools like Jest and Supertest.
	•	Write end-to-end tests simulating onboarding with role selection.
	•	Add SQL tests for RLS policies to CI/CD pipeline.
	7.	Documentation & Collaboration
	•	Update backend and database schema documentation to include new tables, policies, and API contracts.
	•	Provide SQL migration and seed script docs.
	•	Communicate changes and requirements to frontend and QA teams.
	8.	Customer/User Testing
	•	Prepare QA testing instructions to verify role selection UI, API behavior, and role persistence during onboarding.
	•	Collect and triage user feedback on role options, descriptions, and selection process.

⸻

References & Files to Update:
	•	Database migrations and seed scripts: database/roles_migration.sql, database/roles_seed.sql
	•	RLS policy scripts: database/roles_rls.sql
	•	Backend API routes: server/routes.ts
	•	Backend storage and service logic: server/storage.ts
	•	Frontend API calls and UI components (coordination): client/src/pages/onboarding.tsx, client/src/components/onboarding/RoleSelector.tsx
	•	Middleware setup and configuration: server/middleware/auth.ts or equivalent

⸻

Explicit Instructions to Validate:
	•	Run migration scripts on Supabase and verify roles and user_roles tables exist with correct schema.
	•	Run provided SQL to insert missing roles including “host” and “guide”.
	•	Validate RLS policies by executing test queries as anonymous and authenticated users.
	•	Execute API calls to /api/roles/community and confirm the full list of roles is returned without auth errors.
	•	Complete end-to-end onboarding test to ensure role selection persists correctly.
	•	Update all tests and ensure they pass before finalizing.

⸻

Please confirm completion with logs, screenshots, and test results. If any blockers or missing information arise, report immediately for clarification.
