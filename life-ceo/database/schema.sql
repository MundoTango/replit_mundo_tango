-- Life CEO Database Schema
-- Independent database for AI-powered life management

CREATE SCHEMA IF NOT EXISTS life_ceo;

-- Users (links to authentication system)
CREATE TABLE life_ceo.users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    external_id VARCHAR(255) UNIQUE NOT NULL, -- SSO/Auth provider ID
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    timezone VARCHAR(100) DEFAULT 'America/Argentina/Buenos_Aires',
    language VARCHAR(10) DEFAULT 'es-AR',
    location JSONB DEFAULT '{"city": "Buenos Aires", "country": "Argentina"}',
    preferences JSONB DEFAULT '{}',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Agent Configurations
CREATE TABLE life_ceo.agents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    type VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    permissions JSONB DEFAULT '[]',
    priority VARCHAR(20) DEFAULT 'medium',
    config JSONB DEFAULT '{}',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Agent Memory Storage
CREATE TABLE life_ceo.agent_memories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    agent_type VARCHAR(50) NOT NULL,
    user_id UUID NOT NULL REFERENCES life_ceo.users(id),
    content JSONB NOT NULL,
    importance FLOAT DEFAULT 0.5 CHECK (importance >= 0 AND importance <= 1),
    tags TEXT[] DEFAULT '{}',
    embedding vector(1536), -- For semantic search
    created_at TIMESTAMP DEFAULT NOW(),
    expires_at TIMESTAMP,
    FOREIGN KEY (agent_type) REFERENCES life_ceo.agents(type)
);

-- Agent Tasks
CREATE TABLE life_ceo.tasks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    agent_type VARCHAR(50) NOT NULL,
    user_id UUID NOT NULL REFERENCES life_ceo.users(id),
    title VARCHAR(500) NOT NULL,
    description TEXT,
    priority VARCHAR(20) DEFAULT 'medium',
    status VARCHAR(20) DEFAULT 'pending',
    due_date TIMESTAMP,
    completed_at TIMESTAMP,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (agent_type) REFERENCES life_ceo.agents(type)
);

-- Inter-Agent Messages
CREATE TABLE life_ceo.agent_messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    from_agent VARCHAR(50) NOT NULL,
    to_agent VARCHAR(50),
    user_id UUID NOT NULL REFERENCES life_ceo.users(id),
    type VARCHAR(50) NOT NULL, -- 'request', 'response', 'notification', 'insight'
    payload JSONB NOT NULL,
    priority VARCHAR(20) DEFAULT 'medium',
    processed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (from_agent) REFERENCES life_ceo.agents(type)
);

-- Voice Commands History
CREATE TABLE life_ceo.voice_commands (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES life_ceo.users(id),
    transcript TEXT NOT NULL,
    language VARCHAR(10) DEFAULT 'es-AR',
    processed_by VARCHAR(50),
    response TEXT,
    context JSONB DEFAULT '{}',
    confidence FLOAT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Insights Generated by Agents
CREATE TABLE life_ceo.insights (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    agent_type VARCHAR(50) NOT NULL,
    user_id UUID NOT NULL REFERENCES life_ceo.users(id),
    type VARCHAR(50) NOT NULL,
    title VARCHAR(500) NOT NULL,
    content TEXT,
    confidence FLOAT DEFAULT 0.5,
    metadata JSONB DEFAULT '{}',
    is_actionable BOOLEAN DEFAULT FALSE,
    action_taken BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    expires_at TIMESTAMP,
    FOREIGN KEY (agent_type) REFERENCES life_ceo.agents(type)
);

-- User Context (for Buenos Aires specific features)
CREATE TABLE life_ceo.user_context (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES life_ceo.users(id),
    context_type VARCHAR(50) NOT NULL, -- 'location', 'work', 'health', 'social'
    data JSONB NOT NULL,
    valid_from TIMESTAMP DEFAULT NOW(),
    valid_until TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(user_id, context_type)
);

-- Agent Performance Metrics
CREATE TABLE life_ceo.agent_metrics (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    agent_type VARCHAR(50) NOT NULL,
    user_id UUID NOT NULL REFERENCES life_ceo.users(id),
    metric_type VARCHAR(50) NOT NULL,
    value FLOAT NOT NULL,
    metadata JSONB DEFAULT '{}',
    recorded_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (agent_type) REFERENCES life_ceo.agents(type)
);

-- Integrations (for external services)
CREATE TABLE life_ceo.integrations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES life_ceo.users(id),
    service_name VARCHAR(100) NOT NULL,
    service_type VARCHAR(50) NOT NULL, -- 'calendar', 'email', 'finance', etc
    credentials JSONB, -- Encrypted
    config JSONB DEFAULT '{}',
    is_active BOOLEAN DEFAULT TRUE,
    last_sync TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(user_id, service_name)
);

-- Create indexes for performance
CREATE INDEX idx_memories_user_agent ON life_ceo.agent_memories(user_id, agent_type);
CREATE INDEX idx_memories_tags ON life_ceo.agent_memories USING GIN(tags);
CREATE INDEX idx_tasks_user_status ON life_ceo.tasks(user_id, status);
CREATE INDEX idx_tasks_due_date ON life_ceo.tasks(due_date) WHERE status != 'completed';
CREATE INDEX idx_messages_user_processed ON life_ceo.agent_messages(user_id, processed);
CREATE INDEX idx_insights_user_actionable ON life_ceo.insights(user_id, is_actionable);
CREATE INDEX idx_voice_commands_user ON life_ceo.voice_commands(user_id, created_at DESC);

-- Insert default agents
INSERT INTO life_ceo.agents (type, name, description, permissions, priority) VALUES
('business', 'Business Agent', 'Manages professional life and career development', '["calendar_access", "email_access", "contact_management"]', 'high'),
('finance', 'Finance Agent', 'Handles financial planning and transactions', '["bank_access", "investment_access", "expense_tracking"]', 'high'),
('health', 'Health Agent', 'Monitors health metrics and wellness', '["health_data_access", "appointment_scheduling", "medication_reminders"]', 'high'),
('relationships', 'Relationships Agent', 'Manages social connections and relationships', '["contact_access", "social_calendar", "communication_tracking"]', 'medium'),
('learning', 'Learning Agent', 'Facilitates continuous learning and skill development', '["course_access", "progress_tracking", "resource_management"]', 'medium'),
('creative', 'Creative Agent', 'Supports creative projects and artistic endeavors', '["project_management", "inspiration_tracking", "collaboration_tools"]', 'medium'),
('network', 'Network Agent', 'Expands and maintains professional network', '["linkedin_access", "event_tracking", "introduction_management"]', 'medium'),
('global_mobility', 'Global Mobility Agent', 'Handles travel and international living', '["travel_booking", "visa_tracking", "location_services"]', 'high'),
('security', 'Security Agent', 'Manages digital and physical security', '["password_management", "security_monitoring", "privacy_protection"]', 'critical'),
('emergency', 'Emergency Agent', 'Handles crisis situations and urgent matters', '["emergency_contacts", "alert_system", "crisis_protocols"]', 'critical'),
('memory', 'Memory Agent', 'Manages long-term memory and knowledge base', '["memory_storage", "knowledge_retrieval", "pattern_recognition"]', 'high'),
('voice', 'Voice Agent', 'Processes voice commands and natural language', '["speech_recognition", "language_processing", "command_routing"]', 'high'),
('data', 'Data Agent', 'Analyzes patterns and provides insights', '["data_analysis", "pattern_detection", "report_generation"]', 'medium'),
('workflow', 'Workflow Agent', 'Optimizes daily routines and processes', '["task_automation", "process_optimization", "efficiency_tracking"]', 'medium'),
('legal', 'Legal Agent', 'Manages legal documents and compliance', '["document_management", "compliance_tracking", "legal_reminders"]', 'medium'),
('home', 'Home Agent', 'Manages household and living environment', '["home_automation", "maintenance_tracking", "utility_management"]', 'low');

-- Enable vector extension for semantic search
CREATE EXTENSION IF NOT EXISTS vector;

-- Function to update timestamps
CREATE OR REPLACE FUNCTION life_ceo.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON life_ceo.users
    FOR EACH ROW EXECUTE FUNCTION life_ceo.update_updated_at_column();

CREATE TRIGGER update_tasks_updated_at BEFORE UPDATE ON life_ceo.tasks
    FOR EACH ROW EXECUTE FUNCTION life_ceo.update_updated_at_column();

CREATE TRIGGER update_integrations_updated_at BEFORE UPDATE ON life_ceo.integrations
    FOR EACH ROW EXECUTE FUNCTION life_ceo.update_updated_at_column();